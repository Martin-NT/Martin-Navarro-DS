from abc import ABC, abstractmethod
# Podemos agregar nuevos m√©todos de pago sin modificar PaymentProcessor, cumpliendo OCP. 

class PaymentMethod(ABC):
    @abstractmethod # Usa @abstractmethod para obligar a las subclases a implementar pay().
    def pay(self): 
        pass #NO tiene implementaci√≥n del m√©todo pay(), solo define que todas las subclases deben tenerlo.
    
#Clases Concretas
# ‚úÖ Cada clase representa un m√©todo de pago diferente.
# ‚úÖ Todas heredan de PaymentMethod y definen su propia implementaci√≥n de pay().

class CreditCardPayment(PaymentMethod):
    def pay(self):
        print("Pagando con tarjeta de cr√©dito")

class MPPayment(PaymentMethod):
    def pay(self):
        print("Pagando con Mercado Pago")

class BitcoinPayment(PaymentMethod):  # ¬°Nuevo m√©todo sin modificar PaymentProcessor!
    def pay(self):
        print("Pagando con Bitcoin")
        
class PaymentProcessor:
    def process_payment(self, payment: PaymentMethod):
        payment.pay()

# Uso
processor = PaymentProcessor()
processor.process_payment(CreditCardPayment())  
processor.process_payment(MPPayment())  
processor.process_payment(BitcoinPayment())

# üéØ ¬øPor qu√© este dise√±o cumple con OCP?
# ‚úÖ Abierto a la extensi√≥n: Si agregamos m√°s m√©todos de pago, solo creamos una nueva clase sin modificar PaymentProcessor.
# ‚úÖ Cerrado a la modificaci√≥n: PaymentProcessor no cambia al agregar nuevos pagos, evitando errores en c√≥digo existente.