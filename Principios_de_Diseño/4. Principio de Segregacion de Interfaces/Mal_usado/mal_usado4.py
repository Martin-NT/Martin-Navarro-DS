#Los clientes no deber√≠an estar forzados a¬† depender de interfaces que no utilizan.

from abc import ABC, abstractmethod

# ‚ùå INTERFAZ CON M√âTODOS INNECESARIOS
class Empleado(ABC):
    @abstractmethod
    def calcular_salario(self):
        pass  # Todos los empleados tienen salario, esto est√° bien.

    @abstractmethod
    def reportar_horas(self):
        pass  # No todos los empleados reportan horas (ej: empleados con salario fijo)

    @abstractmethod
    def tomar_descanso(self):
        pass  # No todos los empleados necesitan esto (ej: contratistas)

# ‚úÖ Empleado Fijo: Debe implementar TODO aunque no necesite todo
class EmpleadoFijo(Empleado):
    def calcular_salario(self):
        return "Salario fijo calculado"

    def reportar_horas(self):
        return "Reporte de horas enviado"

    def tomar_descanso(self):
        return "Empleado fijo toma un descanso"

# ‚úÖ Contratista: Implementa m√©todos que NO NECESITA
class Contratista(Empleado):
    def calcular_salario(self):
        return "Pago por proyecto calculado"

    def reportar_horas(self):
        return "ERROR: Un contratista no reporta horas"

    def tomar_descanso(self):
        return "ERROR: Un contratista no toma descansos"

#üö® ¬øPor qu√© esto viola ISP?
# üî¥ El problema es que Contratista debe implementar reportar_horas() y tomar_pausa(), aunque no los necesite.
# üî¥ Esto hace que tenga m√©todos in√∫tiles o con implementaciones forzadas como "ERROR: Un contratista no reporta horas".
# üî¥ Esto va en contra del principio, porque estamos obligando a clases a implementar m√©todos innecesarios.